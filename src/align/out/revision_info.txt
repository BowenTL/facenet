arguments: align_dataset_mtcnn.py in out --detect_multiple_faces True --image_size 32
--------------------
tensorflow version: 1.14.0
--------------------
git hash: b'f694bef6b0cbae0bfaadef6becc1cb7f1dba4b54'
--------------------
b'diff --git a/src/align/align_dataset_mtcnn.py b/src/align/align_dataset_mtcnn.py\nindex 5be9d38..fab3951 100644\n--- a/src/align/align_dataset_mtcnn.py\n+++ b/src/align/align_dataset_mtcnn.py\n@@ -31,12 +31,11 @@ import os\n import argparse\n import tensorflow as tf\n import numpy as np\n-#import facenet\n import facenet.src.facenet as facenet\n-#import align.detect_face\n import detect_face\n import random\n from time import sleep\n+import utils\n \n def main(args):\n     sleep(random.random())\n@@ -51,12 +50,12 @@ def main(args):\n     print(\'Creating networks and loading parameters\')\n     \n     with tf.Graph().as_default():\n-        gpu_options = tf.compat.v1.GPUOptions(per_process_gpu_memory_fraction=args.gpu_memory_fraction)\n-        sess = tf.compat.v1.Session(config=tf.compat.v1.ConfigProto(gpu_options=gpu_options, log_device_placement=False))\n+        gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=args.gpu_memory_fraction)\n+        sess = tf.Session(config=tf.ConfigProto(gpu_options=gpu_options, log_device_placement=False))\n         with sess.as_default():\n             pnet, rnet, onet = detect_face.create_mtcnn(sess, None)\n     \n-    minsize = 20 # minimum size of face\n+    minsize = 16 # minimum size of face\n     threshold = [ 0.6, 0.7, 0.7 ]  # three steps\'s threshold\n     factor = 0.709 # scale factor\n \n@@ -116,13 +115,7 @@ def main(args):\n                                 det_arr.append(np.squeeze(det))\n \n                             for i, det in enumerate(det_arr):\n-                                det = np.squeeze(det)\n-                                bb = np.zeros(4, dtype=np.int32)\n-                                bb[0] = np.maximum(det[0]-args.margin/2, 0)\n-                                bb[1] = np.maximum(det[1]-args.margin/2, 0)\n-                                bb[2] = np.minimum(det[2]+args.margin/2, img_size[1])\n-                                bb[3] = np.minimum(det[3]+args.margin/2, img_size[0])\n-                                cropped = img[bb[1]:bb[3],bb[0]:bb[2],:]\n+                                cropped, (x0, y0, x1, y1) = utils.crop(img, np.squeeze(det), args.margin)\n                                 scaled = misc.imresize(cropped, (args.image_size, args.image_size), interp=\'bilinear\')\n                                 nrof_successfully_aligned += 1\n                                 filename_base, file_extension = os.path.splitext(output_filename)\n@@ -131,7 +124,7 @@ def main(args):\n                                 else:\n                                     output_filename_n = "{}{}".format(filename_base, file_extension)\n                                 misc.imsave(output_filename_n, scaled)\n-                                text_file.write(\'%s %d %d %d %d\\n\' % (output_filename_n, bb[0], bb[1], bb[2], bb[3]))\n+                                text_file.write(\'%s %d %d %d %d\\n\' % (output_filename_n, x0, y0, x1, y1))\n                         else:\n                             print(\'Unable to align "%s"\' % image_path)\n                             text_file.write(\'%s\\n\' % (output_filename))\n@@ -147,8 +140,8 @@ def parse_arguments(argv):\n     parser.add_argument(\'output_dir\', type=str, help=\'Directory with aligned face thumbnails.\')\n     parser.add_argument(\'--image_size\', type=int,\n         help=\'Image size (height, width) in pixels.\', default=182)\n-    parser.add_argument(\'--margin\', type=int,\n-        help=\'Margin for the crop around the bounding box (height, width) in pixels.\', default=44)\n+    parser.add_argument(\'--margin\', type=float,\n+        help=\'Margin for the crop around the bounding box (height, width), as a proportion of the face height/width\', default=.4)\n     parser.add_argument(\'--random_order\', \n         help=\'Shuffles the order of images to enable alignment using multiple processes.\', action=\'store_true\')\n     parser.add_argument(\'--gpu_memory_fraction\', type=float,\n@@ -158,4 +151,4 @@ def parse_arguments(argv):\n     return parser.parse_args(argv)\n \n if __name__ == \'__main__\':\n-    main(parse_arguments(sys.argv[1:]))\n+    main(parse_arguments(sys.argv[1:]))\n\\ No newline at end of file\ndiff --git a/src/facenet.py b/src/facenet.py\nindex 0e05676..cade235 100644\n--- a/src/facenet.py\n+++ b/src/facenet.py\n@@ -28,6 +28,7 @@ from __future__ import division\n from __future__ import print_function\n \n import os\n+import sys\n from subprocess import Popen, PIPE\n import tensorflow as tf\n import numpy as np'